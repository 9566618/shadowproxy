#!/usr/bin/env python3

from urllib import request
import logging
import json
from datetime import datetime

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Constants for data sources and custom rules
GFW_TRANSLATED_URL = "https://raw.githubusercontent.com/NateScarlet/gfwlist.acl/master/gfwlist.acl.json"
CHINA_IP_LIST_URL = "https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt"
CUSTOM_BYPASS = [
    "127.0.0.1",
    "10.0.0.0/8",
    "172.16.0.0/12",
    "192.168.0.0/16",
    "fd00::/8",
]
CUSTOM_PROXY = []

# Helper function to fetch URL content
def fetch_url_content(url):
    logger.info("FETCHING {}".format(url))
    r = request.urlopen(url)
    return r.read()

# Function to write GFW list into file
def write_gfw_list(fp):
    gfw_json = fetch_url_content(GFW_TRANSLATED_URL)
    gfw_obj = json.loads(gfw_json)
    for line in gfw_obj["blacklist"]:
        fp.write(line.encode("utf-8"))
        fp.write(b"\n")

# Function to write China IP list into file
def write_china_ip(fp):
    china_ip_list = fetch_url_content(CHINA_IP_LIST_URL)
    for line in china_ip_list.decode('utf-8').splitlines():
        fp.write(line.encode("utf-8"))
        fp.write(b"\n")

# Function to generate redir.acl
def write_redir_acl(fp):
    """
    Generate content for redir.acl:
    - [proxy_all]
    - [bypass_list] (China IPs)
    - [bypass_list] (custom bypass IPs)
    """
    fp.write(b"# Generated by genacl.py for redir.acl\n")
    now = datetime.now()
    fp.write("# Time: {}\n\n".format(now.isoformat()).encode("utf-8"))

    # [proxy_all] section
    fp.write(b"[proxy_all]\n\n")

    # [bypass_list] section for China IPs
    fp.write(b"[bypass_list]\n")
    write_china_ip(fp)

    # Add separate [bypass_list] section for custom bypass IPs
    fp.write(b"\n[bypass_list]\n")
    if CUSTOM_BYPASS:
        for ip in CUSTOM_BYPASS:
            fp.write(ip.encode("utf-8"))
            fp.write(b"\n")

# Function to generate dns-base.acl
def write_dns_base_acl(fp):
    """
    Generate content for dns-base.acl:
    - [bypass_all]
    - [proxy_list] (placeholder and actual proxy domains)
    - [bypass_list] (China IPs)
    - [bypass_list] (custom bypass IPs)
    """

    fp.write(b"# Generated by genacl.py\n")
    now = datetime.now()
    fp.write("# Time: {}\n\n".format(now.isoformat()).encode("utf-8"))

    # [bypass_all] section
    fp.write(b"[bypass_all]\n\n")

    # [proxy_list] section with placeholder
    fp.write(b"[proxy_list]\n")
    fp.write(b"{proxy_domains}\n\n")

    # [proxy_list] section with actual rules
    fp.write(b"[proxy_list]\n")
    write_gfw_list(fp)

    # [bypass_list] section for China IPs
    fp.write(b"\n[bypass_list]\n")
    write_china_ip(fp)

    # Add separate [bypass_list] section for custom bypass IPs
    fp.write(b"\n[bypass_list]\n")
    if CUSTOM_BYPASS:
        for ip in CUSTOM_BYPASS:
            fp.write(ip.encode("utf-8"))
            fp.write(b"\n")

# Main function to generate both files
if __name__ == "__main__":
    # Generate shadowproxy-redir.acl
    logger.info("Generating shadowproxy-redir.acl")
    with open("shadowproxy-redir.acl", "wb") as redir_fp:
        write_redir_acl(redir_fp)

    # Generate shadowproxy-dns-base.acl
    logger.info("Generating shadowproxy-dns-base.acl")
    with open("shadowproxy-dns-base.acl", "wb") as dns_base_fp:
        write_dns_base_acl(dns_base_fp)

    logger.info("Files generated: shadowproxy-redir.acl, shadowproxy-dns-base.acl")
